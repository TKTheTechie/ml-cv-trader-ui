/* src/lib/game-over/game-over.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	text,
	transition_in,
	transition_out
} from "../../../_snowpack/pkg/svelte/internal.js";

import { portfolioStore, traderSessionStore } from '../store/store.js';
import { SOLACE_CLIENT_CONTEXT_KEY } from '../solace-client.js';
import { getContext, onMount } from '../../../_snowpack/pkg/svelte.js';
import Leaderboard from '../leaderboard/leaderboard.svelte.js';
import solace from '../../../_snowpack/pkg/solclientjs.js';

function create_fragment(ctx) {
	let section;
	let div1;
	let div0;
	let h1;
	let t1;
	let t2_value = /*$portfolioStore*/ ctx[0].cash.toLocaleString() + "";
	let t2;
	let t3;
	let leaderboard;
	let current;
	leaderboard = new Leaderboard({ props: { numberOfEntries: 10 } });

	return {
		c() {
			section = element("section");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = "CONGRATULATIONS!";
			t1 = text("\n      You've completed your trading session and have walked away with $");
			t2 = text(t2_value);
			t3 = text(". There is nothing left to do right now but party!\n\n      ");
			create_component(leaderboard.$$.fragment);
			attr(h1, "class", "text-4xl text-white");
			attr(div0, "class", "text-lg justify-center items-center align-middle h-full");
			attr(div1, "class", "flex w-full game-over-text h-full");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div1);
			append(div1, div0);
			append(div0, h1);
			append(div0, t1);
			append(div0, t2);
			append(div0, t3);
			mount_component(leaderboard, div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*$portfolioStore*/ 1) && t2_value !== (t2_value = /*$portfolioStore*/ ctx[0].cash.toLocaleString() + "")) set_data(t2, t2_value);
		},
		i(local) {
			if (current) return;
			transition_in(leaderboard.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(leaderboard.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			destroy_component(leaderboard);
		}
	};
}

let showLeaderboard = false;

function instance($$self, $$props, $$invalidate) {
	let $traderSessionStore;
	let $portfolioStore;
	component_subscribe($$self, traderSessionStore, $$value => $$invalidate(1, $traderSessionStore = $$value));
	component_subscribe($$self, portfolioStore, $$value => $$invalidate(0, $portfolioStore = $$value));
	let solaceClient = getContext(SOLACE_CLIENT_CONTEXT_KEY);

	class LeaderEntry {
		constructor(initials, ip_address, score, timestamp) {
			Object.defineProperty(this, "initials", {
				enumerable: true,
				configurable: true,
				writable: true,
				value: void 0
			});

			Object.defineProperty(this, "ip_address", {
				enumerable: true,
				configurable: true,
				writable: true,
				value: void 0
			});

			Object.defineProperty(this, "score", {
				enumerable: true,
				configurable: true,
				writable: true,
				value: void 0
			});

			Object.defineProperty(this, "timestamp", {
				enumerable: true,
				configurable: true,
				writable: true,
				value: void 0
			});

			this.initials = initials;
			this.ip_address = ip_address;
			this.score = score;
			this.timestamp = timestamp.toISOString();
		}
	}

	onMount(async () => {
		//submit high score on load
		setTimeout(
			() => {
				let leaderEntry = new LeaderEntry($traderSessionStore.initials, $traderSessionStore.ip_address, $portfolioStore.cash, new Date());
				solaceClient.publishToTopic('tkthetechie/leader/entry/' + $traderSessionStore.initials, JSON.stringify(leaderEntry), solace.MessageDeliveryModeType.PERSISTENT);
			},
			2000
		);
	});

	return [$portfolioStore];
}

class Game_over extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Game_over;